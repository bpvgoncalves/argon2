% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/argon2_encode.r
\name{argon2_encode}
\alias{argon2_encode}
\title{Argon2 - Password Encoding}
\usage{
argon2_encode(
  password,
  nonce = NULL,
  type = "id",
  iterations = 1,
  memory = 2048,
  threads = 2,
  len = 64
)
}
\arguments{
\item{password}{The plaintext password to be encoded (maps to parameter `P` on RFC 9106).}

\item{nonce}{The salt to be used for the encoding (maps to parameter `S` on RFC 9106).
Valid arguments are:
    - NULL (default), a random nonce of 16 bytes will be generated. This is
    the size recommended by RFC 9106 for password hashing.
    - Integer, a random nonce with a size equal to the parameter will be
    generated. Max = 64.
    - String or Raw vector, will be used directly as nonce.}

\item{type}{Choice of algorithm; currently the supported choices are "i", "d" and "id".
Defaults to "id".}

\item{iterations}{A time cost. Can be any integer from 1 to 2^31 - 1. Maps to parameter `t` on
RFC 9106. Defaults to 1.}

\item{memory}{A memory cost, given in MiB. Can be any integer from 1 to 2^22 - 1. Maps to
parameter `m` on RFC 9106. Defaults to 2 GiB.}

\item{threads}{Number of threads. This affects the speed of hashing, so more is better.
Maps to parameter `p`on RFC 9106. Defaults to 2.}

\item{len}{Length of the desired output hash. Defaults to 68 bytes (512 bits).}
}
\value{
An object of type `argon2.encoded` consisting of a the encoded_hash.
}
\description{
Password encoding

This uses the argon2 (i, d or id variety) hash algorithm with tweekable parameters.

The function uses by default the recommended defaults set on chapter 7.4 of RFC 9106 ("Argon2id
variant with t=1 and 2 GiB memory (...) is secure against side-channel attacks and maximizes
adversarial costs on dedicated brute-force hardware.").
See references for details and implementation source code (also bundled with this package).
}
\examples{
library(argon2)

pass <- "myPassw0rd!"
hash <- argon2_encode(pass)
hash # store this

}
